---
## http://www.sekoia.fr/blog/fastir-collector-on-advanced-threats/

## precompiled binaries in build directory
#- raw: "./fastresponder.py --packages all --ouput_dir {{ dst_path_win }}\\fastresponder"

- debug: msg="{{ bin_path_win }}\\Fastir_Collector-master\\build\\FastIR_x64.exe"
- name: check if FastIR executable present
  win_stat:
    path: "{{ bin_path_win }}\\Fastir_Collector-master\\build\\FastIR_x64.exe"
  register: fastirexe
  ignore_errors: true
- debug: var=fastirexe
#  when: fastirexe.rc == 0

## FIXME! download happens even if already present
- name: FastIR download
  win_get_url:
    url: "{{ item.u }}"
    dest: "{{ item.d }}"
  with_items:
    - { u: 'https://github.com/SekoiaLab/Fastir_Collector/archive/master.zip', d: "{{ bin_path_win }}\\fastir-master.zip"}
    - { u: 'https://github.com/SekoiaLab/Fastir_Collector/releases/download/V1.1/FastIR_x64.exe', d: "{{ bin_path_win }}\\FastIR_x64.exe"}
    - { u: 'https://github.com/SekoiaLab/Fastir_Collector/releases/download/V1.1/FastIR_x86.exe', d: "{{ bin_path_win }}\\FastIR_x86.exe"}
#  when: not fastirexe.stat.exists and (do_download is defined and do_download)

- name: FastIR unzip
  win_unzip:
      src: "{{ bin_path_win }}\\fastir-master.zip"
      dest: "{{ bin_path_win }}"
#  when: not fastirexe.stat.exists and (do_download is defined and do_download)

- debug: var="{{ dst_path_win }}\\{{ prefix }}-fastir"
  ignore_errors: true
- name: check if existing output report
  win_stat:
    path: "{{ dst_path_win }}\\{{ prefix }}-fastir"
  register: fastirout
  ignore_errors: true

- name: Do FastIR check (64bits)
  win_command: "{{ bin_path_win }}\\FastIR_x64.exe {{ fastir_args }}"
  when: not fastirout.stat.exists and ansible_architecture == '64-bit'
- name: Do FastIR check (32bits)
  win_command: "{{ bin_path_win }}\\FastIR_x86.exe {{ fastir_args }}"
  when: not fastirout.stat.exists and ansible_architecture == '32-bit'

## BUG/FIXME! output files Oko

